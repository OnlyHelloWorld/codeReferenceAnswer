java提供的四种常见的线程池demo演示
相关博客地址:https://blog.csdn.net/ailaojie/article/details/88717182

可以思考为什么是这个运行结果
```
package com.star.javaEXE;

import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

public class FixPoolDemo {
    private static Runnable getThread(final int i) {
        return new Runnable() {
            @Override
            public void run() {
                try {
                    Thread.sleep(500);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
                System.out.print(i+" ");
            }
        };
    }
    public static void main(String args[]) {
    	  //创建指定大小的线程池
        ExecutorService fixPool = Executors.newFixedThreadPool(5);
        for (int i = 0; i < 10; i++) {
            fixPool.execute(getThread(i));
        }
        fixPool.shutdown();
    }
}
##输出:
0 2 1 3 4 6 7 5 8 9 
```

```
package com.star.javaEXE;

import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

public class CachePoolDemo {
	private static Runnable getThread(final int i){
        return new Runnable() {
            @Override
            public void run() {
                try {
                    Thread.sleep(1000);
                }catch (Exception e){

                }
                System.out.print(i);
            }
        };
    }
    public static void main(String args[]){
        //创建缓存线程池
        ExecutorService cachePool = Executors.newCachedThreadPool();
        for (int i=1;i<=10;i++){
            cachePool.execute(getThread(i+" "));
        }
        //这里没用调用shutDown方法，可以发现过60秒之后，会自动释放资源。
    }
}
##输出:
2 3 6 5 9 10 1 4 7 8 
```

```
package com.star.javaEXE;

import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

public class SinglePoolDemo {
	private static Runnable getThread(final int i){
        return new Runnable() {
            @Override
            public void run() {
                try {

                    Thread.sleep(500);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
                System.out.print(i+" ");
            }
        };
    }
    public static void main(String args[]) throws InterruptedException {
    	//创建单线程池
        ExecutorService singPool = Executors.newSingleThreadExecutor();
        for (int i=0;i<10;i++){
            singPool.execute(getThread(i));
        }
        //这里需要注意一点，newSingleThreadExecutor和newFixedThreadPool一样，在线程池中没有任务时可执行，也不会释放系统资源的，所以需要shudown。
        singPool.shutdown();
    }
}
##输出:
0 1 2 3 4 5 6 7 8 9 (明显发现执行相比前两个慢)
```

```
package com.star.javaEXE;

import java.util.concurrent.Executors;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.TimeUnit;

public class ScheduledPoolDemo {
	public static void main(String args[]) {
        ScheduledExecutorService ses = Executors.newScheduledThreadPool(10);
        ses.scheduleAtFixedRate(new Runnable() {
            @Override
            public void run() {
                try {
                    Thread.sleep(40);
                    System.out.print(Thread.currentThread().getId() + " ");
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
            }
        }, 0, 2, TimeUnit.SECONDS);
    }
}
##输出:
10 10 12 10 13 12 14 10 15 (输出时间间隔相同)
```

```
//自定义线程池工厂
package com.star.javaEXE;

import java.util.concurrent.ExecutorService;
import java.util.concurrent.SynchronousQueue;
import java.util.concurrent.ThreadFactory;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;

public class ThreadFactoryDemo {
    public static class MyTask1 implements Runnable{
        @Override
        public void run() {
            System.out.println(System.currentTimeMillis()+"Thrad ID:"+Thread.currentThread().getId());
            try {
                Thread.sleep(100);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        }
    }
    public static void main(String[] args){
          MyTask1 task = new MyTask1();
        ExecutorService es = new ThreadPoolExecutor(5, 5, 0L, TimeUnit.MICROSECONDS, new SynchronousQueue<Runnable>(), new ThreadFactory() {
            @Override
            public Thread newThread(Runnable r) {
                Thread t = new Thread(r);
                //设为守护进程
                t.setDaemon(true);
                //记录进程的创建
                System.out.print("创建线程:"+t+" ");
                return  t;
            }
        });
        for (int i = 0;i<=4;i++){
           es.submit(task);
        }
    }
}
##输出:
创建线程:Thread[Thread-0,5,main] 创建线程:Thread[Thread-1,5,main] 创建线程:Thread[Thread-2,5,main] 创建线程:Thread[Thread-3,5,main] 创建线程:Thread[Thread-4,5,main] 1553169652773Thrad ID:10
```

